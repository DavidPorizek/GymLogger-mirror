@page "/excercises"
@inject Data.ApiService apiService
@using GymLogger.Shared.Models

<h3>Excercises</h3>

@if (excercises == null || users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@excerciseModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <label for="name">Name</label>
        <InputText id="name" @bind-Value="excerciseModel.Name" />

        <label for="bodypart">Body Part</label>
        <InputText id="bodypart" @bind-Value="excerciseModel.BodyPart" />

        <label for="userid">User ID</label>
        <InputSelect id="userid" @bind-Value="excerciseModel.UserId">
            @foreach (var user in users)
            {
                <option value="@user.Id">@user.Name</option>
            }
        </InputSelect>


        <button type="submit">Submit</button>
    </EditForm>

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>BodyPart</th>
                <th>User ID</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var excercise in excercises)
            {
                <tr>
                    <td>@excercise.Id</td>
                    <td>@excercise.Name</td>
                    <td>@excercise.BodyPart</td>
                    <td>@excercise.UserId</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Excercise excerciseModel = new();
    List<Excercise>? excercises;
    List<User>? users;

    protected override async Task OnInitializedAsync()
    {
        excercises = await apiService.GetExcercisesAsync();
        users = await apiService.GetUsersAsync();
    }

    private async void HandleValidSubmit()
    {
        await apiService.CreateExcerciseAsync(excerciseModel);
    }
}